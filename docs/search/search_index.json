{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yardb About Yardb is a file management system based on a dbms architecture to perform its operations. It uses sql language but contains support for other data types. The project was created for study purposes and should not be used in production. Its future additions should support .tar files and native time series operations. Installation (Not Working Yet) You can install the yardb with pip: $ pip install yardb or using the direct github link: $ pip install git+https://github.com/jose-gilberto/yardb Status The project is now under development. Features (v0.0.2) Information Catalog Information Schema Columns Basic DDL statements ( CREATE, ALTER, DROP ) Basic DQL statement ( SELECT * FROM ... ) How to run Start the dbms server: $ yardb start Open the cli interface for statements: $ yardb cli Requisites Python 3 Contributing Contributors Jos\u00e9 Gilberto - Author","title":"Home"},{"location":"#yardb","text":"","title":"Yardb"},{"location":"#about","text":"Yardb is a file management system based on a dbms architecture to perform its operations. It uses sql language but contains support for other data types. The project was created for study purposes and should not be used in production. Its future additions should support .tar files and native time series operations.","title":"About"},{"location":"#installation-not-working-yet","text":"You can install the yardb with pip: $ pip install yardb or using the direct github link: $ pip install git+https://github.com/jose-gilberto/yardb","title":"Installation (Not Working Yet)"},{"location":"#status","text":"The project is now under development.","title":"Status"},{"location":"#features-v002","text":"Information Catalog Information Schema Columns Basic DDL statements ( CREATE, ALTER, DROP ) Basic DQL statement ( SELECT * FROM ... )","title":"Features (v0.0.2)"},{"location":"#how-to-run","text":"Start the dbms server: $ yardb start Open the cli interface for statements: $ yardb cli","title":"How to run"},{"location":"#requisites","text":"Python 3","title":"Requisites"},{"location":"#contributing","text":"","title":"Contributing"},{"location":"#contributors","text":"Jos\u00e9 Gilberto - Author","title":"Contributors"},{"location":"explanation/","text":"Architecture The project will be builded on top of the following architecture of a dbms: Explaining each part separately. Query (Query Manager) Manages queries based on a subset of SQL. Some new commands implemented while others were removed to make building the base easier. All grammar can be found in this link . Query Parser Do the compiler functions on top of each statement. Following this sequence: - Tokenize (Lexer) - Parser (Parser) - Sematic analyzer - AST build Query Optimizer Run an optimization on top of an AST, making the changes based on relational algebra functions like projection and others functions. Query Planner Do the execution plan based on the AST generated before, using a set of algorithms builded internally on the yardb. Metadata Contains information relating to tables, columns, schemas, and other types of data relating to the stores used internally by yardb. Indexes Storage Manager File Manager Memory Manager Buffer Data Transaction Manager Concurrency Control Recovery Manager .logs Executor","title":"Architecture"},{"location":"explanation/#architecture","text":"The project will be builded on top of the following architecture of a dbms: Explaining each part separately.","title":"Architecture"},{"location":"explanation/#query-query-manager","text":"Manages queries based on a subset of SQL. Some new commands implemented while others were removed to make building the base easier. All grammar can be found in this link .","title":"Query (Query Manager)"},{"location":"explanation/#query-parser","text":"Do the compiler functions on top of each statement. Following this sequence: - Tokenize (Lexer) - Parser (Parser) - Sematic analyzer - AST build","title":"Query Parser"},{"location":"explanation/#query-optimizer","text":"Run an optimization on top of an AST, making the changes based on relational algebra functions like projection and others functions.","title":"Query Optimizer"},{"location":"explanation/#query-planner","text":"Do the execution plan based on the AST generated before, using a set of algorithms builded internally on the yardb.","title":"Query Planner"},{"location":"explanation/#metadata","text":"Contains information relating to tables, columns, schemas, and other types of data relating to the stores used internally by yardb.","title":"Metadata"},{"location":"explanation/#indexes","text":"","title":"Indexes"},{"location":"explanation/#storage-manager","text":"","title":"Storage Manager"},{"location":"explanation/#file-manager","text":"","title":"File Manager"},{"location":"explanation/#memory-manager","text":"","title":"Memory Manager"},{"location":"explanation/#buffer","text":"","title":"Buffer"},{"location":"explanation/#data","text":"","title":"Data"},{"location":"explanation/#transaction-manager","text":"","title":"Transaction Manager"},{"location":"explanation/#concurrency-control","text":"","title":"Concurrency Control"},{"location":"explanation/#recovery-manager","text":"","title":"Recovery Manager"},{"location":"explanation/#logs","text":"","title":".logs"},{"location":"explanation/#executor","text":"","title":"Executor"},{"location":"metadata/","text":"Metadata & Indexes Metadata In a simple definition, metadata is considered by yardb to be all data relating to the inner workings of the dbms. That is, data relating to your stored data. Such as, for example: data relating to tables that exist in the schema or the columns of a table with their types and sizes in bytes. Basically the metadata is found in 3 static structure tables: information_schema , information_schema_column and information_schema_catalog . The last name is momentarily reserved for structures that will be created in other versions. information_schema Contains table data divided into two columns: table_name and schema. The schema for now will always be public, later it will allow the creation of more schemas to store the tables. column size (bytes) type table_name 255 bytes varchar schema 255 bytes varchar It can be organized in heap pages as follows: pd_lower (16b) pd_upper (16b) pointer_1 (16b) pointer_2 (16b) empty space empty space row_2 (255b+255b) table_name_2 (255b) schema_2 (255b) row_1 (255b+255b) table_name_1 (255b) schema_1 (255b) information_schema_column Contains data relating to the columns of each table, which can be divided as follows: columns size (bytes) type table_name 255 varchar column_name 255 varchar nullable 1 boolean data_type 16 int length 16 int It can be organized in heap pages as follows: pd_lower (16b) pd_upper (16b) pointer_1 (16b) empty space empty space empty space empty space row_1 (255b+255b) table_name_1 (255b) column_name_1 (255b) nullable (1b) data_type (16b) length (16b)","title":"Metadata & Indexes"},{"location":"metadata/#metadata-indexes","text":"","title":"Metadata &amp; Indexes"},{"location":"metadata/#metadata","text":"In a simple definition, metadata is considered by yardb to be all data relating to the inner workings of the dbms. That is, data relating to your stored data. Such as, for example: data relating to tables that exist in the schema or the columns of a table with their types and sizes in bytes. Basically the metadata is found in 3 static structure tables: information_schema , information_schema_column and information_schema_catalog . The last name is momentarily reserved for structures that will be created in other versions.","title":"Metadata"},{"location":"metadata/#information_schema","text":"Contains table data divided into two columns: table_name and schema. The schema for now will always be public, later it will allow the creation of more schemas to store the tables. column size (bytes) type table_name 255 bytes varchar schema 255 bytes varchar It can be organized in heap pages as follows: pd_lower (16b) pd_upper (16b) pointer_1 (16b) pointer_2 (16b) empty space empty space row_2 (255b+255b) table_name_2 (255b) schema_2 (255b) row_1 (255b+255b) table_name_1 (255b) schema_1 (255b)","title":"information_schema"},{"location":"metadata/#information_schema_column","text":"Contains data relating to the columns of each table, which can be divided as follows: columns size (bytes) type table_name 255 varchar column_name 255 varchar nullable 1 boolean data_type 16 int length 16 int It can be organized in heap pages as follows: pd_lower (16b) pd_upper (16b) pointer_1 (16b) empty space empty space empty space empty space row_1 (255b+255b) table_name_1 (255b) column_name_1 (255b) nullable (1b) data_type (16b) length (16b)","title":"information_schema_column"},{"location":"patch-notes/","text":"Patch Notes About versions: \ud83d\ude80 Launched About tasks: \u2714\ufe0f Implemented \u2b55 Not implemented \u2716\ufe0f Cancelled v0.0.1 \ud83d\ude80 CLI Interface \u2714\ufe0f Overall Statements Support \u2714\ufe0f v0.0.2 \ud83d\ude80 Startup class configuring the root folder \u2714\ufe0f Save informations like: \u2714\ufe0f Database version \u2714\ufe0f Databases in this cluster \u2714\ufe0f Create tables, views and indexes folders \u2714\ufe0f Preserve the state of the cluster after shutdown \u2714\ufe0f v0.0.3 Query parser \u2b55 Basic DDL \u2b55 Basic DQL \u2b55","title":"Patch Notes"},{"location":"patch-notes/#patch-notes","text":"About versions: \ud83d\ude80 Launched About tasks: \u2714\ufe0f Implemented \u2b55 Not implemented \u2716\ufe0f Cancelled","title":"Patch Notes"},{"location":"patch-notes/#v001","text":"CLI Interface \u2714\ufe0f Overall Statements Support \u2714\ufe0f","title":"v0.0.1 \ud83d\ude80"},{"location":"patch-notes/#v002","text":"Startup class configuring the root folder \u2714\ufe0f Save informations like: \u2714\ufe0f Database version \u2714\ufe0f Databases in this cluster \u2714\ufe0f Create tables, views and indexes folders \u2714\ufe0f Preserve the state of the cluster after shutdown \u2714\ufe0f","title":"v0.0.2 \ud83d\ude80"},{"location":"patch-notes/#v003","text":"Query parser \u2b55 Basic DDL \u2b55 Basic DQL \u2b55","title":"v0.0.3"},{"location":"utils/","text":"Utils CLI Interface The command line interface is responsible for starting a class that receives the sql statements to be executed by dbms. An example implementation would be as follows: class CLIInterface: @staticmethod def run(): while True: # Do the processing of information # Calls DBMS passing the query ... The loop runs until an exit command is entered by the user. Possible commands are: .exit .tables All commands are started with a . followed by the statement. Overall Statements These are commands that start with a period, these commands are executed without going through the normal processes of reading an SQL command. That is, they start and are processed by custom and static pipes. They can be used regardless of the database file structure. command explanation .exit Calls a exit, breaking the loop and closing the connection with the yardb. .tables Shows all the existing tables in this database. In the future, new commands can be created and added to this list. SQL Statements Only in v0.2+. SktInterface (Socket Interface) Only in v0.5+.","title":"Utils"},{"location":"utils/#utils","text":"","title":"Utils"},{"location":"utils/#cli-interface","text":"The command line interface is responsible for starting a class that receives the sql statements to be executed by dbms. An example implementation would be as follows: class CLIInterface: @staticmethod def run(): while True: # Do the processing of information # Calls DBMS passing the query ... The loop runs until an exit command is entered by the user. Possible commands are: .exit .tables All commands are started with a . followed by the statement.","title":"CLI Interface"},{"location":"utils/#overall-statements","text":"These are commands that start with a period, these commands are executed without going through the normal processes of reading an SQL command. That is, they start and are processed by custom and static pipes. They can be used regardless of the database file structure. command explanation .exit Calls a exit, breaking the loop and closing the connection with the yardb. .tables Shows all the existing tables in this database. In the future, new commands can be created and added to this list.","title":"Overall Statements"},{"location":"utils/#sql-statements","text":"Only in v0.2+.","title":"SQL Statements"},{"location":"utils/#sktinterface-socket-interface","text":"Only in v0.5+.","title":"SktInterface (Socket Interface)"}]}